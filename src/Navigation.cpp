//
//  Navigation.cpp
//  test
//
//  Created by RAIDEMOT on 21.01.2021.
//

#include "Navigation.hpp"

Navigation::Navigation(){}

// Интерфейс инициализация файлов
void Navigation::openingFiles()
{
    using namespace std;
    
    string path;
    ptrFiles = new Files();
    InitializingFiles iF;
    
    int i = 0;
    
    do
    {
        cout.flush();
        
        cout << "Введите путь к файлу. Ввведите \"0\", чтобы перейти к манипулятору" << endl;
         
        string path = "";
        
        // [ТЕСТИРОВАНИЕ]
        path = "/Users/raidemot/Documents/RAIDEMOT/Xcode projects/TextFile/data/ThermometerData/file";
        path += to_string(i+1);
        path += ".dat";
        i++;
        // [ТЕСТИРОВАНИЕ]
        
//        getline(cin, path);
        
        if(path == "0")
            break;

        if(iF.openFile(ptrFiles, path))
        {
            cout << "-----------------------------------------------------------------\n";
            cout << "Файл был успешно добавлен" << endl;
            cout << "-----------------------------------------------------------------\n";
            // [ТЕСТИРОВАНИЕ]
            //break; // УДАЛИТЬ ПОТОМ
            // [ТЕСТИРОВАНИЕ]
        }
        else
        {
            cout << "-----------------------------------------------------------------\n";
            cout << "Файл не удалось открыть, введите правильный путь к файлу" << endl;
            cout << "-----------------------------------------------------------------\n";
        }
        
    }
    while (i < 4);
}

// Интерфейс главного меню
void Navigation::mainMenu()
{
    using namespace std;
    
    do
    {
        // Если не добавили не один файл, то завершаем программу
        if(!(ptrFiles->getNumberFiles() > 0))
        {
            cout << "-----------------------------------------------------------------\n";
            cout << "Главное меню не доступно, так как не были добавлены файлы\n";
            cout << "-----------------------------------------------------------------\n";
            break;
        }
        
        cout << "-----------------------------------------------------------------\n";
        cout << "Главное меню\n";
        cout << "1 - Посмотреть список добавленных файлов\n";
        cout << "2 - Скопировать из файла #2 в конец файла #1\n";
        cout << "3 - Сформировать файл с уникальными строками и общими строками\n";
        cout << "4 - Сортировка данных по возрастанию\n";
        cout << "5 - Сортировка данных по убыванию\n";
        cout << "0 - Выход\n";
        cout << "Выполнить: ";
        
        
        if(!(cin >> choice)) {
            cout << "-----------------------------------------------------------------\n";
            cout << "Введены символы вместо цифр!\n";
            cin.clear();
            cin.ignore(10000, '\n');
            choice = sizeof(choice);
            continue;
         }
        
        cout << "-----------------------------------------------------------------\n";

        switch(choice) {
            case 0:
                cout << "До свидание)\n";
                cout << "-----------------------------------------------------------------\n";
                break;
            case 1:
                ptrFiles->printInitFile();
                break;
            case 2:
                copyFiles();
                break;
            case 3:
                uniqueStrings();
                break;
            case 4:
                sortFileAscending();
                break;
            case 5:
                cout << "Сортировка данных по убыванию не реализован\n";
                break;
            default:
                cout << "Извините, но такой команды нету\n";
         }
    }
    while(choice != 0);
}

// Модули //

// Интерфейс копирование из файла #2 в конец файла #1

void Navigation::copyFiles()
{
    using namespace std;
    
    unsigned short indexFile2, indexFile1;
    
    do
    {
        cout << "-----------------------------------------------------------------\n";
        cout << "Копирование из файла #2 в конец файла #1 \n";
        cout << "С кого файла копировать?\n";
        ptrFiles->printInitFile();
        cout << "Введите номер файла: ";
        
        if(!(cin >> choice)) {
            cout << "-----------------------------------------------------------------\n";
            cout << "Введены символы вместо цифр!\n";
            cin.clear();
            cin.ignore(10000, '\n');
            choice = sizeof(choice);
            continue;
         }
        
        if (choice > ptrFiles->getNumberFiles())
        {
            cout << "-----------------------------------------------------------------\n";
            cout << "Неверно введен номер, пожалуйста введите заного!\n";
        }
        else
        {
            indexFile2 = choice;
            cout << "-----------------------------------------------------------------\n";
            cout << "Файл #2 выбран!\n";
            cout << "-----------------------------------------------------------------\n";
            break;
        }
        
        cout << "-----------------------------------------------------------------\n";
    }
    while(1);
    
    do
    {
        cout << "В какой файл копировать?\n";
        ptrFiles->printInitFile();
        cout << "Введите номер файла: ";
        
        if(!(cin >> choice)) {
            cout << "-----------------------------------------------------------------\n";
            cout << "Введены символы вместо цифр!\n";
            cin.clear();
            cin.ignore(10000, '\n');
            choice = sizeof(choice);
            continue;
         }
        
        if (choice > ptrFiles->getNumberFiles())
        {
            cout << "-----------------------------------------------------------------\n";
            cout << "Неверно введен номер, пожалуйста введите заного!\n";
        }
        else
        {
            indexFile1 = choice;
            cout << "-----------------------------------------------------------------\n";
            cout << "Файл #1 выбран!\n";
            break;
        }
        
        cout << "-----------------------------------------------------------------\n";
    }
    while(1);
    
    if(ptrFiles->copyFiles(indexFile2, indexFile1))
    {
        cout << "-----------------------------------------------------------------\n";
        cout << "Копирование завершено!\n";
        mainMenu();
    }
    else
    {
        cout << "-----------------------------------------------------------------\n";
        cout << "Произошла неизвестная ошибка!\n";
    };
}

void Navigation::sortFileAscending()
{
    using namespace std;
    
    unsigned short indexFile, indexColumn;
    
    do
    {
        cout << "-----------------------------------------------------------------\n";
        cout << "Сортировка данных по возрастанию \n";
        cout << "Какой файл сортировать?\n";
        ptrFiles->printInitFile();
        cout << "Введите номер файла: ";
        
        if(!(cin >> choice)) {
            cout << "-----------------------------------------------------------------\n";
            cout << "Введены символы вместо цифр!\n";
            cin.clear();
            cin.ignore(10000, '\n');
            choice = sizeof(choice);
            continue;
         }
        
        if (choice > ptrFiles->getNumberFiles())
        {
            cout << "-----------------------------------------------------------------\n";
            cout << "Неверно введен номер, пожалуйста введите заного!\n";
        }
        else
        {
            indexFile = choice;
            cout << "-----------------------------------------------------------------\n";
            cout << "Файл #2 выбран!\n";
            cout << "-----------------------------------------------------------------\n";
            break;
        }
        
        cout << "-----------------------------------------------------------------\n";
    }
    while(1);
    
    do
    {
        cout << "-----------------------------------------------------------------\n";
        cout << "Какой сортировать столбец?\n";
        ptrFiles->printNameFileColumns(indexFile);
        cout << "Введите номер столбца: ";
        
        if(!(cin >> choice)) {
            cout << "-----------------------------------------------------------------\n";
            cout << "Введены символы вместо цифр!\n";
            cin.clear();
            cin.ignore(10000, '\n');
            choice = sizeof(choice);
            continue;
         }
        
        if (choice > ptrFiles->getNumberFiles())
        {
            cout << "-----------------------------------------------------------------\n";
            cout << "Неверно введен номер, пожалуйста введите заного!\n";
        }
        else
        {
            indexColumn = choice;
            cout << "-----------------------------------------------------------------\n";
            cout << "Файл #2 выбран!\n";
            cout << "-----------------------------------------------------------------\n";
            break;
        }
        
        cout << "-----------------------------------------------------------------\n";
    }
    while(1);
};

void Navigation::uniqueStrings()
{
    using namespace std;
    
    unsigned short indexFile2, indexFile1;
    
    do
    {
        cout << "-----------------------------------------------------------------\n";
        cout << "Сформировать файл с уникальными строками и общими строками \n";
        cout << "Внимание! Функция доробатывается. \n";
        cout << "Выберите файл #1?\n";
        ptrFiles->printInitFile();
        cout << "Введите номер файла: ";
        
        if(!(cin >> choice)) {
            cout << "-----------------------------------------------------------------\n";
            cout << "Введены символы вместо цифр!\n";
            cin.clear();
            cin.ignore(10000, '\n');
            choice = sizeof(choice);
            continue;
         }
        
        if (choice > ptrFiles->getNumberFiles())
        {
            cout << "-----------------------------------------------------------------\n";
            cout << "Неверно введен номер, пожалуйста введите заного!\n";
        }
        else
        {
            indexFile2 = choice;
            cout << "-----------------------------------------------------------------\n";
            cout << "Файл #1 выбран!\n";
            cout << "-----------------------------------------------------------------\n";
            break;
        }
        
        cout << "-----------------------------------------------------------------\n";
    }
    while(1);
    
    do
    {
        cout << "Выведите файл #2\n";
        ptrFiles->printInitFile();
        cout << "Введите номер файла: ";
        
        if(!(cin >> choice)) {
            cout << "-----------------------------------------------------------------\n";
            cout << "Введены символы вместо цифр!\n";
            cin.clear();
            cin.ignore(10000, '\n');
            choice = sizeof(choice);
            continue;
         }
        
        if (choice > ptrFiles->getNumberFiles())
        {
            cout << "-----------------------------------------------------------------\n";
            cout << "Неверно введен номер, пожалуйста введите заного!\n";
        }
        else
        {
            indexFile1 = choice;
            cout << "-----------------------------------------------------------------\n";
            cout << "Файл #1 выбран!\n";
            break;
        }
        
        cout << "-----------------------------------------------------------------\n";
    }
    while(1);
    
//    if(ptrFiles->copyFiles(indexFile2, indexFile1))
//    {
//        cout << "-----------------------------------------------------------------\n";
//        cout << "Копирование завершено!\n";
//        mainMenu();
//    }
//    else
//    {
//        cout << "-----------------------------------------------------------------\n";
//        cout << "Произошла неизвестная ошибка!\n";
//    };
};

